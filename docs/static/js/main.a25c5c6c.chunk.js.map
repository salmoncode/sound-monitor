{"version":3,"sources":["AudioInputDevice.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AudioInputDevice","props","state","monitoring","level","className","this","deviceInfo","label","onClick","_stop","_start","max","value","context","AudioContext","navigator","mediaDevices","getUserMedia","audio","deviceId","stream","microphone","createMediaStreamSource","analyser","createAnalyser","dataArray","Uint8Array","frequencyBinCount","connect","destination","setState","_tick","close","getByteTimeDomainData","reduce","a","b","Math","e","console","error","requestAnimationFrame","bind","React","Component","App","devices","map","device","key","_refreshDevices","setInterval","enumerateDevices","filter","kind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"qVAuEeA,G,8DAvDb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CACXC,YAAY,EACZC,MAAO,GAJa,E,qDAQd,IAAD,OACP,OACE,6BAASC,UAAU,gBACjB,yBAAKA,UAAU,qBACb,2BAAIC,KAAKL,MAAMM,WAAWC,QAE3BF,KAAKJ,MAAMC,WACV,4BAAQM,QAAS,WAAO,EAAKC,UAA7B,QACA,4BAAQD,QAAS,WAAO,EAAKE,WAA7B,QAEF,8BAAUC,IAAI,MAAMC,MAAOP,KAAKJ,MAAME,W,8JAMlCU,EAAU,IAAIC,a,SACCC,UAAUC,aAAaC,aAAa,CAACC,MAAO,CAACC,SAAUd,KAAKL,MAAMM,WAAWa,Y,OAA5FC,E,OACAC,EAAaR,EAAQS,wBAAwBF,GAC7CG,EAAWV,EAAQW,iBACnBC,EAAY,IAAIC,WAAWH,EAASI,mBAE1CN,EAAWO,QAAQL,GACnBA,EAASK,QAAQf,EAAQgB,aACzBxB,KAAKyB,SAAS,CAAC5B,YAAY,EAAMW,UAASU,WAAUE,cACpDpB,KAAK0B,Q,qIAGQ,IAAD,EACd,UAAA1B,KAAKJ,MAAMY,eAAX,SAAoBmB,QACpB3B,KAAKyB,SAAS,CAAC5B,YAAY,M,8BAI3B,GAAIG,KAAKJ,MAAMsB,UAAalB,KAAKJ,MAAMwB,UAAvC,CACA,IACEpB,KAAKJ,MAAMsB,SAASU,sBAAsB5B,KAAKJ,MAAMwB,WACrD,IAAMtB,EAAQE,KAAKJ,MAAMwB,UAAUS,QAAO,SAACC,EAAEC,GAAH,OAAOC,KAAK1B,IAAIwB,EAAEC,MAC5D/B,KAAKyB,SAAS,CAAE3B,UAChB,MAAMmC,GAEN,YADAC,QAAQC,MAAMF,GAGhBG,sBAAsBpC,KAAK0B,MAAMW,KAAKrC,Y,GApDXsC,IAAMC,YCmCtBC,E,kDAtCb,WAAY7C,GAAa,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CACX6C,QAAS,IAHW,E,qDAQtB,OACE,yBAAK1C,UAAU,aACb,4BAAQA,UAAU,cAChB,8CAEF,8BACE,iCAEIC,KAAKJ,MAAM6C,QAAQC,KAAI,SAAAC,GAAM,OAC3B,kBAAC,EAAD,CAAkBC,IAAKD,EAAO7B,SAAUb,WAAY0C,Y,0CAS7C,IAAD,OAClB3C,KAAK6C,kBACLC,aAAY,kBAAM,EAAKD,oBAAmB,O,wKAIAnC,UAAUC,aAAaoC,mB,OAA3DN,E,OACHO,QAAO,SAAAL,GAAM,MAAoB,eAAhBA,EAAOM,MAA6C,YAApBN,EAAO7B,YAC3Dd,KAAKyB,SAAS,CAAEgB,Y,2GAnCFH,IAAMC,WCCJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBjD,WACrBA,UAAUkD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLD,QAAQC,MAAMA,EAAM+B,c","file":"static/js/main.a25c5c6c.chunk.js","sourcesContent":["import React from 'react';\nimport './InputDevice.css';\n\ninterface StateInterface {\n  monitoring: boolean\n  context?: AudioContext\n  analyser?: AnalyserNode\n  dataArray?: Uint8Array\n  level: number\n}\n\ninterface PropsInterface {\n  deviceInfo: InputDeviceInfo\n}\n\nclass AudioInputDevice extends React.Component<PropsInterface, StateInterface> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      monitoring: false,\n      level: 0\n    }\n  }\n\n  render() {\n    return (\n      <article className=\"input-device\">\n        <div className=\"input-device-name\">\n          <p>{this.props.deviceInfo.label}</p>\n        </div>\n        {this.state.monitoring ?\n          <button onClick={() => {this._stop()}}>stop</button>:\n          <button onClick={() => {this._start()}}>play</button>\n        }\n        <progress max=\"300\" value={this.state.level}></progress>\n      </article>\n    );\n  }\n\n  private async _start() {\n      const context = new AudioContext();\n      const stream = await navigator.mediaDevices.getUserMedia({audio: {deviceId: this.props.deviceInfo.deviceId}});\n      const microphone = context.createMediaStreamSource(stream);\n      const analyser = context.createAnalyser();\n      const dataArray = new Uint8Array(analyser.frequencyBinCount);\n\n      microphone.connect(analyser);\n      analyser.connect(context.destination);\n      this.setState({monitoring: true, context, analyser, dataArray});\n      this._tick();\n  }\n\n  private _stop() {\n    this.state.context?.close();\n    this.setState({monitoring: false});\n  }\n\n  private _tick() {\n    if(!this.state.analyser || !this.state.dataArray) return;\n    try{\n      this.state.analyser.getByteTimeDomainData(this.state.dataArray)\n      const level = this.state.dataArray.reduce((a,b)=>Math.max(a,b));\n      this.setState({ level });\n    } catch(e) {\n      console.error(e);\n      return\n    }\n    requestAnimationFrame(this._tick.bind(this));\n  }\n}\n\nexport default AudioInputDevice;\n","import React from 'react';\nimport './App.css';\nimport AudioInputDevice from './AudioInputDevice';\n\ninterface StateInterface {\n  devices: InputDeviceInfo[];\n}\n\ninterface PropsInterface {\n}\n\nclass App extends React.Component<PropsInterface, StateInterface> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      devices: []\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"App-header\">\n          <h1>Sound Monitor</h1>\n        </header>\n        <main>\n          <section>\n            {\n              this.state.devices.map(device =>\n                <AudioInputDevice key={device.deviceId} deviceInfo={device}/>\n              )\n            }\n          </section>\n        </main>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this._refreshDevices()\n    setInterval(() => this._refreshDevices(), 1000);\n  }\n\n  private async _refreshDevices() {\n    const devices: InputDeviceInfo[] = (await navigator.mediaDevices.enumerateDevices())\n      .filter(device => device.kind === 'audioinput' && device.deviceId !== 'default') as InputDeviceInfo[];\n    this.setState({ devices });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}